import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  getCustomerId,
  postSchedules,
  getChilds,
  getVaccines,
  getVaccineCombos,
} from "../../apis/api";
import ErrorBoundary from "../../components/common/ErrorBoundary";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const BookVaccine = () => {
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [children, setChildren] = useState([]);
  const [customerId, setCustomerId] = useState(null);
  const [vaccines, setVaccines] = useState([]);
  const [vaccineCombos, setVaccineCombos] = useState([]);

  const [formData, setFormData] = useState({
    booking: {
      bookingDate: "",
      customer: {
        customerId: "",
      },
    },
    vaccineId: [],
    vaccineComboId: [],
    child: {
      childId: "",
    },
    consent: false,
  });

  const navigate = useNavigate();

  // L·∫•y customerID khi ƒëƒÉng nh·∫≠p
  useEffect(() => {
    const fetchCustomerId = async () => {
      try {
        const userId = localStorage.getItem("userId");
        console.log(localStorage.getItem("userId"));

        if (!userId) {
          toast.error("L·ªói: Kh√¥ng t√¨m th·∫•y userId, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
          return;
        }

        // Ki·ªÉm tra xem userId c√≥ t·ªìn t·∫°i trong d·ªØ li·ªáu API kh√¥ng
        const customer = await getCustomerId(userId);
        if (customer && customer.customerId) {
          setCustomerId(customer.customerId);
          console.log("‚úÖ Customer ID l·∫•y ƒë∆∞·ª£c:", customer.id);
        } else {
          toast.error(
            "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh√°ch h√†ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!"
          );
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin kh√°ch h√†ng:", error);
        toast.error(`L·ªói khi l·∫•y th√¥ng tin kh√°ch h√†ng: ${error.message}`);
      }
    };

    fetchCustomerId();
  }, []);

  // L·∫•y danh s√°ch tr·∫ª em
  useEffect(() => {
    const fetchChildren = async () => {
      try {
        const data = await getChilds();

        console.log("API Response (Get Childs):", children);

        setChildren(data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu tr·∫ª em:", error);
      }
    };
    fetchChildren();
  }, []);
  // lay vaccine
  useEffect(() => {
    const fetchVaccines = async () => {
      try {
        const data = await getVaccines();
        console.log("üì° API Response (Get Vaccines):", data);
        setVaccines(data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu v·∫Øc-xin:", error);
      }
    };
    fetchVaccines();
  }, []);

  //lay combo vaccine
  useEffect(() => {
    const fetchVaccineCombos = async () => {
      try {
        const data = await getVaccineCombos();
        console.log("üì° API Response (Get Vaccine Combos):", data);
        setVaccineCombos(data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu combo v·∫Øc-xin:", error);
      }
    };
    fetchVaccineCombos();
  }, []);

  // X·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu form
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    setFormData((prev) => {
      if (name === "vaccineId" || name === "vaccineComboId") {
        return { ...prev, [name]: [value] }; // ƒê·∫£m b·∫£o l∆∞u d∆∞·ªõi d·∫°ng m·∫£ng
      }

      return {
        ...prev,
        [name]: type === "checkbox" ? checked : value,
      };
    });
  };

  // Ki·ªÉm tra d·ªØ li·ªáu form tr∆∞·ªõc khi g·ª≠i
  const validateForm = () => {
    const newErrors = {};
    if (!formData.bookingDate)
      newErrors.bookingDate = "Ng√†y ƒë·∫∑t l·ªãch l√† b·∫Øt bu·ªôc";
    if (!formData.vaccineId && !formData.vaccineComboId)
      newErrors.vaccineId = "Vui l√≤ng ch·ªçn v·∫Øc-xin ho·∫∑c combo v·∫Øc-xin";
    if (!formData.childId) newErrors.childId = "Vui l√≤ng ch·ªçn tr·∫ª";
    if (!formData.consent) newErrors.consent = "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // G·ª≠i d·ªØ li·ªáu l√™n backend
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!customerId) {
      toast.error("L·ªói: Kh√¥ng t√¨m th·∫•y Customer ID. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      console.error("‚ö†Ô∏è customerId b·ªã null ho·∫∑c undefined:", customerId);
      return;
    }

    if (validateForm()) {
      setIsLoading(true);
      const loadingToast = toast.loading("ƒêang ƒë·∫∑t l·ªãch, vui l√≤ng ch·ªù...");

      try {
        const payload = {
          booking: {
            bookingDate: formData.bookingDate,
            customer: { customerId: customerId }, // customerId n·∫±m trong customer
          },
          vaccineId: formData.vaccineId ? formData.vaccineId : [],
          vaccineComboId: formData.vaccineComboId
            ? formData.vaccineComboId
            : [],

          child: { childId: formData.childId }, // Child ID
        };

        // Log d·ªØ li·ªáu g·ª≠i l√™n API
        console.log(
          "üöÄ D·ªØ li·ªáu g·ª≠i l√™n API:",
          JSON.stringify(payload, null, 2)
        );
        console.log("customerId:", customerId);
        console.log("Form Data:", formData);

        // G·ª≠i d·ªØ li·ªáu l√™n API
        const result = await postSchedules(payload);
        console.log("API Response:", result);

        // X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API
        if (result.success) {
          toast.update(loadingToast, {
            render: "ƒê·∫∑t l·ªãch th√†nh c√¥ng!",
            type: "success",
            isLoading: false,
            autoClose: 3000,
          });
          navigate("/status-schedule");
        } else {
          toast.update(loadingToast, {
            render:
              result.message ||
              "ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.",
            type: "error",
            isLoading: false,
            autoClose: 3000,
          });
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);
        toast.update(loadingToast, {
          render: "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
          type: "error",
          isLoading: false,
          autoClose: 3000,
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-8">
          <h1 className="text-3xl font-bold text-center text-blue-600 mb-8">
            ƒê·∫∑t L·ªãch Ti√™m Ch·ªßng Cho Tr·∫ª Em
          </h1>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Ng√†y ƒë·∫∑t l·ªãch */}
            <label htmlFor="bookingDate" className="font-medium">
              Ng√†y ƒê·∫∑t L·ªãch
            </label>
            <input
              type="date"
              name="bookingDate"
              value={formData.bookingDate}
              onChange={handleChange}
              className={`block w-full py-2 border ${
                errors.bookingDate ? "border-red-500" : "border-gray-300"
              } rounded-md shadow-sm`}
            />
            {errors.bookingDate && (
              <p className="text-sm text-red-500">{errors.bookingDate}</p>
            )}

            {/* Ch·ªçn tr·∫ª */}
            <label htmlFor="childId" className="font-medium">
              Ch·ªçn Tr·∫ª
            </label>
            <select
              name="childId"
              value={formData.childId}
              onChange={handleChange}
              className={`block w-full py-2 border ${
                errors.childId ? "border-red-500" : "border-gray-300"
              } rounded-md shadow-sm`}
            >
              <option value="">Ch·ªçn Tr·∫ª</option>
              {children.map((child) => (
                // Th√™m thu·ªôc t√≠nh key v√†o m·ªói <option>
                <option key={child.childId} value={child.childId}>
                  {child.firstName} {child.lastName}
                </option>
              ))}
            </select>

            {errors.childId && (
              <p className="text-sm text-red-500">{errors.childId}</p>
            )}

            {/* Ch·ªçn Vaccine */}
            <label htmlFor="vaccineId" className="font-medium">
              Ch·ªçn V·∫Øc-xin
            </label>
            <select
              name="vaccineId"
              value={formData.vaccineId}
              onChange={handleChange}
              className={`block w-full py-2 border ${
                errors.vaccineId ? "border-red-500" : "border-gray-300"
              } rounded-md shadow-sm`}
            >
              <option value="">Ch·ªçn V·∫Øc-xin</option>
              {vaccines.map((vaccine) => (
                <option key={vaccine.vaccineId} value={vaccine.vaccineId}>
                  {vaccine.name} - {vaccine.country} ({vaccine.doseNumber} li·ªÅu)
                </option>
              ))}
            </select>

            {errors.vaccineId && (
              <p className="text-sm text-red-500">{errors.vaccineId}</p>
            )}

            {/* Ch·ªçn Combo Vaccine (Kh√¥ng b·∫Øt bu·ªôc) */}
            <label htmlFor="vaccineComboId" className="font-medium">
              Ch·ªçn Combo V·∫Øc-xin (T√πy ch·ªçn)
            </label>
            <select
              name="vaccineComboId"
              value={formData.vaccineComboId}
              onChange={handleChange}
              className={`block w-full py-2 border ${
                errors.vaccineId ? "border-red-500" : "border-gray-300"
              } rounded-md shadow-sm`}
            >
              <option value="">Kh√¥ng ch·ªçn combo</option>
              {vaccineCombos.map((combo) => (
                <option key={combo.vaccineComboId} value={combo.vaccineComboId}>
                  {combo.name} - {combo.priceCombo} VNƒê
                </option>
              ))}
            </select>

            {errors.vaccineId && (
              <p className="text-sm text-red-500">{errors.vaccineId}</p>
            )}

            <div className="flex items-center">
              <input
                type="checkbox"
                name="consent"
                checked={formData.consent}
                onChange={handleChange}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label className="ml-2 block text-sm text-gray-900">
                T√¥i ƒë·ªìng √Ω v·ªõi vi·ªác ti√™m v·∫Øc-xin v√† x√°c nh·∫≠n th√¥ng tin ƒë√£ cung
                c·∫•p l√† ch√≠nh x√°c
              </label>
            </div>
            {errors.consent && (
              <p className="text-sm text-red-500">{errors.consent}</p>
            )}

            <button
              type="submit"
              disabled={isLoading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {isLoading ? "ƒêang ƒë·∫∑t l·ªãch..." : "ƒê·∫∑t L·ªãch Ti√™m"}
            </button>
          </form>
        </div>
      </div>
    </ErrorBoundary>
  );
};

export default BookVaccine;
